---
description: Guidelines for implementing complete Trigger.dev task workflows in Next.js applications with real-time progress monitoring and result display
globs: 
alwaysApply: false
---
# Cursor Rule: Trigger.dev Task Workflow Implementation in Next.js

## Overview
Guidelines for implementing Trigger.dev task workflows in Next.js applications with real-time progress monitoring and persistent task tracking.

## Core Architecture Pattern

### 1. Task Triggering API Route
```typescript
// /app/api/trigger-[task]/route.ts
import { tasks } from '@trigger.dev/sdk/v3';

export async function POST(request: NextRequest) {
  if (!process.env.TRIGGER_SECRET_KEY) {
    return NextResponse.json({ error: 'TRIGGER_SECRET_KEY not set' }, { status: 500 });
  }

  const body = await request.json();
  const handle = await tasks.trigger('your-task-id', body);
  
  return NextResponse.json({
    id: handle.id,
    publicAccessToken: handle.publicAccessToken,
  });
}
```

### 2. Client-Side Hook with Persistence
```typescript
// hooks/useTaskExecution.ts
import { useRealtimeRun } from "@trigger.dev/react-hooks";

export function useTaskExecution() {
  const [state, setState] = useState({
    stage: 'idle' | 'processing' | 'complete' | 'error',
    runId: undefined,
    publicAccessToken: undefined,
    progress: {},
    result: undefined,
    error: undefined,
  });

  const { run } = useRealtimeRun(state.runId || "", {
    accessToken: state.publicAccessToken,
    enabled: !!(state.runId && state.publicAccessToken && state.stage === 'processing'),
  });

  useEffect(() => {
    if (!run || state.stage !== 'processing') return;
    
    if (run.metadata) {
      setState(prev => ({ ...prev, progress: run.metadata }));
    }
    
    if (run.status === 'COMPLETED' && run.output) {
      setState(prev => ({ ...prev, stage: 'complete', result: run.output }));
      updateHistoryEntryStatus(state.runId, 'complete', run.output);
    }
    
    if (run.status === 'FAILED') {
      setState(prev => ({ ...prev, stage: 'error', error: 'Task failed' }));
      updateHistoryEntryStatus(state.runId, 'failed', undefined, 'Task execution failed');
    }
  }, [run, state.stage, state.runId]);

  const triggerTask = async (input) => {
    // 1. Save to localStorage immediately
    const processingEntry = addProcessingEntry(input.description, Date.now().toString());

    try {
      // 2. Trigger task
      const response = await fetch('/api/trigger-your-task', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(input),
      });
      
      const handle = await response.json();
      
      // 3. Update with real runId
      updateProcessingEntryWithRunId(processingEntry.id, handle.id);
      
      setState(prev => ({
        ...prev,
        stage: 'processing',
        runId: handle.id,
        publicAccessToken: handle.publicAccessToken,
      }));
    } catch (error) {
      updateHistoryEntryStatus(processingEntry.id, 'failed', undefined, error.message);
      setState(prev => ({ ...prev, stage: 'error', error: error.message }));
    }
  };

  return { ...state, triggerTask };
}
```

## Task Recovery System

### Server-Side Recovery APIs
```typescript
// /app/api/task-status/[runId]/route.ts
import { runs } from '@trigger.dev/sdk/v3';

export async function GET(request, { params }) {
  if (!process.env.TRIGGER_SECRET_KEY) {
    return NextResponse.json({ error: 'Server configuration error' }, { status: 500 });
  }

  const { runId } = await params;
  const run = await runs.retrieve(runId);

  return NextResponse.json({
    runId: run.id,
    status: run.status,
    metadata: run.metadata,
    output: run.output,
    error: run.status === 'FAILED' ? 'Task execution failed' : undefined,
  });
}

// /app/api/generate-token/route.ts
import { auth } from '@trigger.dev/sdk/v3';

export async function POST(request) {
  const { runId } = await request.json();
  
  const publicToken = await auth.createPublicToken({
    scopes: { read: { runs: [runId] } },
    expirationTime: "24h",
  });

  return NextResponse.json({
    publicAccessToken: publicToken,
    runId: runId,
    expiresAt: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString(),
  });
}
```

### Recovery Hooks
```typescript
// hooks/useTaskRecovery.ts
export function useTaskRecovery() {
  const [recoverableTasks, setRecoverableTasks] = useState([]);

  const checkAllProcessingTasks = useCallback(async () => {
    const processingEntries = getProcessingEntries();
    
    const statusChecks = processingEntries.map(async (entry) => {
      const response = await fetch(`/api/task-status/${entry.runId}`);
      if (!response.ok) return null;
      
      const serverStatus = await response.json();
      
      if (serverStatus.status === 'COMPLETED') {
        updateHistoryEntryStatus(entry.runId, 'complete', serverStatus.output);
        return null;
      } else if (serverStatus.status === 'FAILED') {
        updateHistoryEntryStatus(entry.runId, 'failed', undefined, serverStatus.error);
        return null;
      }
      
      return { ...entry, serverStatus };
    });

    const results = await Promise.all(statusChecks);
    setRecoverableTasks(results.filter(Boolean));
  }, []);

  useEffect(() => {
    checkAllProcessingTasks();
  }, []);

  return { recoverableTasks };
}

// hooks/useTaskReconnection.ts
export function useTaskReconnection() {
  const reconnectToTask = useCallback(async (runId) => {
    const statusResponse = await fetch(`/api/task-status/${runId}`);
    const currentStatus = await statusResponse.json();

    if (currentStatus.status === 'PENDING' || currentStatus.status === 'EXECUTING') {
      const tokenResponse = await fetch('/api/generate-token', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ runId }),
      });

      const { publicAccessToken } = await tokenResponse.json();
      
      return { canReconnect: true, publicAccessToken, currentStatus };
    }
    
    return { canReconnect: false, currentStatus };
  }, []);

  return { reconnectToTask };
}
```

## Persistent Storage Pattern
```typescript
// lib/localStorage.ts
interface TaskHistoryEntry {
  id: string;
  description: string;
  runId: string;
  status: 'processing' | 'complete' | 'failed' | 'canceled';
  result?: any;
  error?: string;
  timestamp: number;
  completedAt?: number;
}

export function addProcessingEntry(description: string, runId: string): TaskHistoryEntry;
export function updateHistoryEntryStatus(runId: string, status: string, result?: any, error?: string): void;
export function getProcessingEntries(): TaskHistoryEntry[];
```

## Component Structure
```typescript
export default function TaskInterface() {
  const { stage, progress, result, error, triggerTask } = useTaskExecution();
  const { recoverableTasks } = useTaskRecovery();

  return (
    <div>
      {recoverableTasks.length > 0 && (
        <TaskRecoveryNotification recoverableTasks={recoverableTasks} />
      )}
      
      {(stage === 'idle' || stage === 'error') && (
        <TaskForm onSubmit={triggerTask} />
      )}
      
      <ProgressView metadata={progress} isVisible={stage === 'processing'} />
      <ResultView result={result} isVisible={stage === 'complete'} />
      
      {stage === 'error' && <ErrorDisplay error={error} />}
    </div>
  );
}
```

## Implementation Requirements

### Environment Variables
- **TRIGGER_SECRET_KEY**: Required for all server-side operations
- **NEXT_PUBLIC_TRIGGER_API_URL**: Optional for custom instances

### File Structure
```
src/
├── app/api/
│   ├── trigger-[task]/route.ts
│   ├── task-status/[runId]/route.ts
│   └── generate-token/route.ts
├── hooks/
│   ├── useTaskExecution.ts
│   ├── useTaskRecovery.ts
│   └── useTaskReconnection.ts
├── lib/localStorage.ts
└── types/task.ts
```

### TypeScript Types
```typescript
interface TaskInput { /* Define based on task requirements */ }
interface TaskOutput { /* Define based on task output */ }
interface TaskMetadata { /* Define based on task metadata.set() calls */ }

interface TaskStatusResponse {
  runId: string;
  status: 'PENDING' | 'EXECUTING' | 'COMPLETED' | 'FAILED' | 'CANCELED';
  metadata?: TaskMetadata;
  output?: TaskOutput;
  error?: string;
}
```

## Critical Implementation Steps
1. **Immediate Persistence**: Save tasks to localStorage when triggered
2. **Server-side Recovery**: Implement status and token generation endpoints
3. **Recovery Detection**: Check for processing tasks on app load
4. **Token Management**: Generate scoped tokens for reconnection
5. **Status Synchronization**: Update localStorage based on server status

## Security Best Practices
- Never expose TRIGGER_SECRET_KEY to client-side
- Scope tokens to specific runId
- Store publicAccessToken only in component state
- Validate all inputs in API routes
- Handle token expiration with regeneration
